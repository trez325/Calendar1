import telebot
from telebot import types
import xml.etree.ElementTree as ET
from datetime import datetime
import threading
import time
#–†–ê–ë–û–ß–ò–ô –ë–û–¢
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('5198735526:AAHYngDdLU4ywk7bp1s6G7GB_CrOSF3o_Y0')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML
events = []
user_watchlist = {}
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ üìå')
def handle_watchlist_request(message):
    show_watchlist(message)

def load_events():
    global events
    tree = ET.parse('./BOOKS/XML/output.xml')
    root = tree.getroot()
    for event in root.findall('Event'):
        events.append({
            "id": event.find('Column3').text if event.find('Column3') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "sport": event.find('Column1').text if event.find('Column1') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "name": event.find('Column2').text if event.find('Column2') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "category": event.find('Column5').text if event.find('Column5') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "dates": (
                event.find('Column6').text if event.find('Column6') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                event.find('Column7').text if event.find('Column7') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            ),
            "location": (
                event.find('Column8').text.strip()
                if event.find('Column8') is not None and event.find('Column8').text is not None
                else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            ),
            "participants": event.find('Column9').text if event.find('Column9') is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        })

load_events()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
PAGE_SIZE = 5

def send_notifications():
    while True:
        current_date = datetime.now().date()
        for chat_id, state in user_states.items():
            watchlist = state.get("watchlist", [])
            for event in watchlist:
                event_start_date = datetime.strptime(event["dates"][0], "%d.%m.%Y").date()
                days_left = (event_start_date - current_date).days

                if 1 <= days_left <= 7:  # –ï—Å–ª–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 1‚Äì7 –¥–Ω–µ–π
                    bot.send_message(
                        chat_id,
                        (
                            f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n\n"
                            f"üéØ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event['name']}\n"
                            f"üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {event['dates'][0]}\n"
                            f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
                            f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {event['participants']}\n\n"
                            f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π."
                        ),
                        parse_mode="Markdown"
                    )
        time.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_watchlist_"))
def remove_from_watchlist(call):
    event_id = call.data.split("_")[2]
    watchlist = user_states[call.message.chat.id].get("watchlist", [])

    # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    updated_watchlist = [event for event in watchlist if event["id"] != event_id]
    user_states[call.message.chat.id]["watchlist"] = updated_watchlist

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
    bot.answer_callback_query(call.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
    show_watchlist(call.message)

def send_filter_options(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton('–í–∏–¥ —Å–ø–æ—Ä—Ç–∞')
    btn2 = types.KeyboardButton('–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞')
    btn3 = types.KeyboardButton('–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è')
    btn4 = types.KeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    btn5 = types.KeyboardButton('–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')
    btn6 = types.KeyboardButton('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è')
    btn_reset = types.KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')  # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    btn_watchlist = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ üìå')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    markup.add(btn_watchlist, btn_reset)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:',reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
def send_filter_values(message, filter_name, values):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for value in values:
        markup.add(types.KeyboardButton(value))
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(back_button)
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ {filter_name}:', reply_markup=markup)


# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
def get_filter_values(filter_name):
    if filter_name == '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞':
        return list(set(event['sport'] for event in events))
    elif filter_name == '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞':
        return list(set(event['name'] for event in events))
    elif filter_name == '–ü—Ä–æ–≥—Ä–∞–º–º–∞':
        return []  # –í–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    elif filter_name == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
        return []  # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
    elif filter_name == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        return []  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
    elif filter_name == '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞':
        return ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']
    elif filter_name == '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
        return ['–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def filter_by_participants(events, min_participants):
    filtered_events = []
    for event in events:
        try:
            participants = int(event['participants'])
            if participants >= min_participants:
                filtered_events.append(event)
        except ValueError:
            # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            continue
    return filtered_events


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –º–µ—Å—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
def filter_by_location(events, location):
    filtered_events = []
    for event in events:
        # –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        if location.lower() in event['location'].lower():
            filtered_events.append(event)
    return filtered_events


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—É (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)
def filter_by_gender(events, gender):
    keywords = {
        "–ú—É–∂—Å–∫–æ–π": ["–º—É–∂—á–∏–Ω—ã", "—é–Ω–æ—à–∏", "–º–∞–ª—å—á–∏–∫–∏", "—é–Ω–∏–æ—Ä—ã"],
        "–ñ–µ–Ω—Å–∫–∏–π": ["–∂–µ–Ω—â–∏–Ω—ã", "–¥–µ–≤—É—à–∫–∏", "–¥–µ–≤–æ—á–∫–∏", "—é–Ω–∏–æ—Ä–∫–∏"]
    }
    filtered_events = []
    for event in events:
        category = event.get('category', '').lower()
        if any(keyword in category for keyword in keywords.get(gender, [])):
            filtered_events.append(event)
    return filtered_events


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if user_id not in user_states:
        user_states[message.chat.id] = {"filters": {}, "page": 0}

    welcome_text = (
         "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!** üèÖ\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º **–ª–µ–≥–∫–æ** –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. "
        "–ó–∞–±—É–¥—å—Ç–µ –æ –≥—Ä–æ–º–æ–∑–¥–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–∞ 2500+ —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî —Ç–µ–ø–µ—Ä—å –≤—Å—ë –ø–æ–¥ —Ä—É–∫–æ–π, —Å —É–¥–æ–±–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n\n"
        "‚ú® **–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç:**\n"
        "‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –ò—Å–∫–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:\n"
        "  - –í–∏–¥ —Å–ø–æ—Ä—Ç–∞\n"
        "  - –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n"
        "  - üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n"
        "  - üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "  - üßë‚Äçü§ù‚Äçüßë –ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞\n"
        "  - üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n"
        "‚Ä¢ üìå **–î–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö**\n"
        "‚Ä¢ üóÇÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å **—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö**, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏\n\n"
        "üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.\n"
        "2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
        "3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!\n\n"
        "üì≤ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.\n"
    )

    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown')
    send_filter_options(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
@bot.message_handler(func=lambda message: message.text in ['–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', '–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'])
def handle_filter_selection(message):
    if message.text == '–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        user_states[message.chat.id]["filters"] = {}
        user_states[message.chat.id]["page"] = 0
        send_filter_options(message)
        return

    filter_name = message.text
    user_states[message.chat.id]["selected_filter"] = filter_name

    # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
    if filter_name == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        user_states[message.chat.id]["waiting_for_participants"] = True
    elif filter_name == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
        user_states[message.chat.id]["waiting_for_location"] = True
    elif filter_name == '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):")
        user_states[message.chat.id]["waiting_for_dates"] = True
    else:
        values = get_filter_values(filter_name)
        send_filter_values(message, filter_name, values)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
@bot.message_handler(func=lambda message: message.text not in ['–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', '–ù–∞–∑–∞–¥'])
def handle_value_selection(message):
    filter_name = user_states[message.chat.id].get('selected_filter', '')
    selected_value = message.text
    user_states[message.chat.id]["filters"][filter_name] = selected_value

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if user_states[message.chat.id].get("waiting_for_participants"):
        try:
            min_participants = int(selected_value)
            user_states[message.chat.id]["filters"]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"] = min_participants
            user_states[message.chat.id]["waiting_for_participants"] = False
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if user_states[message.chat.id].get("waiting_for_location"):
        user_states[message.chat.id]["filters"]["–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"] = selected_value
        user_states[message.chat.id]["waiting_for_location"] = False

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É
    if user_states[message.chat.id].get("waiting_for_dates"):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            selected_date = datetime.strptime(selected_value, "%d.%m.%Y")
            user_states[message.chat.id]["filters"]["–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"] = selected_date
            user_states[message.chat.id]["waiting_for_dates"] = False
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    filtered_events = events
    for key, value in user_states[message.chat.id]["filters"].items():
        if key == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            filtered_events = filter_by_location(filtered_events, value)
        elif key == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
            filtered_events = filter_by_participants(filtered_events, value)
        elif key == '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞':
            filtered_events = filter_by_gender(filtered_events, value)
        elif key == '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            selected_date = user_states[message.chat.id]["filters"].get("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
            filtered_events = [event for event in filtered_events if selected_date >= datetime.strptime(event['dates'][0], "%d.%m.%Y") and selected_date <= datetime.strptime(event['dates'][1], "%d.%m.%Y")]
        else:
            filtered_events = [event for event in filtered_events if value.lower() in str(event).lower()]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    send_event_list(message.chat.id, filtered_events)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
def send_event_list(chat_id, filtered_events, page=0, message=None):
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_events = filtered_events[start:end]

    if not page_events:
        bot.send_message(chat_id, "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = "üìÖ *–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:*\n\n" + "\n".join([f"{i + 1}. *{event['name']}*\n{event['dates'][0]} - {event['dates'][1]}\nüìç {event['location']}\nüë• {event['participants']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                      for i, event in enumerate(page_events)])

    markup = types.InlineKeyboardMarkup()
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if end < len(filtered_events):
        markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"page_{page + 1}"))
    for event in page_events:
        markup.add(types.InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ üìë: {event['name']}", callback_data=f"details_{event['id']}"))
    markup.add(types.InlineKeyboardButton("üîç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="add_filter"))

    if message:
        bot.edit_message_text(
            text,
            chat_id=chat_id,
            message_id=message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
    else:
        bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith("details_"))
def event_details(call):
    event_id = call.data.split("_")[1]
    event = next((e for e in events if e["id"] == event_id), None)

    if event:
        text = (
            f"üéØ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event['name']}\n"
            f"üèÖ **–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:** {event['sport']}\n"
            f"üìÖ **–î–∞—Ç—ã:** {event['dates'][0]} - {event['dates'][1]}\n"
            f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
            f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {event['participants']}\n"
            f"üîñ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {event['category']}\n"
            f"üÜî **ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:** {event['id']}\n"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
        current_page = int(call.data.split("_")[2]) if "_" in call.data else 0

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ", callback_data=f"watchlist_{event['id']}"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_list_{current_page}"
            )
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="Markdown"
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_list_"))
def back_to_list(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
    page = int(call.data.split("_")[3])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters = user_states[call.message.chat.id].get("filters", {})

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    filtered_events = events
    for key, value in filters.items():
        if key == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            filtered_events = filter_by_location(filtered_events, value)
        elif key == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
            filtered_events = filter_by_participants(filtered_events, value)
        elif key == '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞':
            filtered_events = filter_by_gender(filtered_events, value)
        elif key == '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            selected_date = filters.get("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
            filtered_events = [event for event in filtered_events if selected_date >= datetime.strptime(event['dates'][0], "%d.%m.%Y") and selected_date <= datetime.strptime(event['dates'][1], "%d.%m.%Y")]
        else:
            filtered_events = [event for event in filtered_events if value.lower() in str(event).lower()]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    send_event_list(call.message.chat.id, filtered_events, page, call.message)

# –í —Ñ—É–Ω–∫—Ü–∏–∏ send_event_list –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ callback-–¥–∞–Ω–Ω—ã–µ
def send_event_list(chat_id, filtered_events, page=0, message=None):
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_events = filtered_events[start:end]

    if not page_events:
        bot.send_message(chat_id, "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = "üìÖ *–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:*\n\n" + "\n".join([f"{i + 1}. *{event['name']}*\n{event['dates'][0]} - {event['dates'][1]}\nüìç {event['location']}\nüë• {event['participants']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                      for i, event in enumerate(page_events)])

    markup = types.InlineKeyboardMarkup()
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if end < len(filtered_events):
        markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"page_{page + 1}"))
    for event in page_events:
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ callback-–¥–∞–Ω–Ω—ã–µ
        markup.add(types.InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ üìë: {event['name']}", callback_data=f"details_{event['id']}_{page}"))
    markup.add(types.InlineKeyboardButton("üîç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="add_filter"))

    if message:
        bot.edit_message_text(
            text,
            chat_id=chat_id,
            message_id=message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
    else:
        bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("page_"))
def page_navigation(call):
    page = int(call.data.split("_")[1])
    filters = user_states[call.message.chat.id].get("filters", {})

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    filtered_events = events
    for key, value in filters.items():
        if key == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            filtered_events = filter_by_location(filtered_events, value)
        elif key == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
            filtered_events = filter_by_participants(filtered_events, value)
        elif key == '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞':
            filtered_events = filter_by_gender(filtered_events, value)
        elif key == '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            selected_date = filters.get("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
            filtered_events = [event for event in filtered_events if selected_date >= datetime.strptime(event['dates'][0], "%d.%m.%Y") and selected_date <= datetime.strptime(event['dates'][1], "%d.%m.%Y")]
        else:
            filtered_events = [event for event in filtered_events if value.lower() in str(event).lower()]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    send_event_list(call.message.chat.id, filtered_events, page, call.message)
@bot.callback_query_handler(func=lambda call: call.data.startswith("watchlist_"))
@bot.callback_query_handler(func=lambda call: call.data.startswith("watchlist_"))
def add_to_watchlist(call):
    event_id = call.data.split("_")[1]
    event = next((e for e in events if e["id"] == event_id), None)

    if event:
        watchlist = user_states[call.message.chat.id].get("watchlist", [])
        if event not in watchlist:
            watchlist.append(event)
            user_states[call.message.chat.id]["watchlist"] = watchlist
            bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ!")
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")



@bot.message_handler(commands=['watchlist'])
def show_watchlist(message):
    watchlist = user_states[message.chat.id].get("watchlist", [])

    if not watchlist:
        bot.send_message(message.chat.id, "üóÇÔ∏è –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç.")
        return

    text = "üìã **–í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:**\n\n"
    for i, event in enumerate(watchlist, start=1):
        text += (
            f"{i}. üéØ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event['name']}\n"
            f"üèÖ **–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:** {event['sport']}\n"
            f"üìÖ **–î–∞—Ç—ã:** {event['dates'][0]} - {event['dates'][1]}\n"
            f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
            f"üÜî **ID:** {event['id']}\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º ID
        )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞
    markup = types.InlineKeyboardMarkup()
    for event in watchlist:
        markup.add(
            types.InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å: {event['name']}",
                callback_data=f"remove_watchlist_{event['id']}"
            )
        )

    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
@bot.callback_query_handler(func=lambda call: call.data == "add_filter")
def add_filter(call):
    send_filter_options(call.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_"))
def page_navigation(call):
    page = int(call.data.split("_")[1])
    filtered_events = events
    for key, value in user_states[call.message.chat.id]["filters"].items():
        if key == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            filtered_events = filter_by_location(filtered_events, value)
        elif key == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
            filtered_events = filter_by_participants(filtered_events, value)
        elif key == '–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞':
            filtered_events = filter_by_gender(filtered_events, value)
        elif key == '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            selected_date = user_states[call.message.chat.id]["filters"].get("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
            filtered_events = [event for event in filtered_events if selected_date >= datetime.strptime(event['dates'][0], "%d.%m.%Y") and selected_date <= datetime.strptime(event['dates'][1], "%d.%m.%Y")]
        else:
            filtered_events = [event for event in filtered_events if value.lower() in str(event).lower()]
    send_event_list(call.message.chat.id, filtered_events, page, call.message)


notification_thread = threading.Thread(target=send_notifications)
notification_thread.daemon = True  # –ß—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
notification_thread.start()

bot.polling(none_stop=True)
